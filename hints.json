{
  "1": "Use SELECT with WHERE on city.",
  "2": "Order by upload_time descending and limit.",
  "3": "Aggregate by contractor_id and count.",
  "4": "Group by job_id and use AVG.",
  "5": "Use LIKE with wildcard.",
  "6": "ORDER BY name ascending.",
  "7": "Join jobs with contractors.",
  "8": "Left join contractors with photos and filter for NULL photo ids.",
  "9": "Group jobs by contractor, count them, order by count descending and limit 1.",
  "10": "Join jobs with photos and group by job id.",
  "11": "Left join jobs with photos and filter for NULL photo ids.",
  "12": "Group photos by contractor and use MIN(upload_time).",
  "13": "Compute average job count using a subquery or CTE.",
  "14": "Group by contractor and take MAX(start_date).",
  "15": "Group photos by job_id, count them, order by count descending, limit 3.",
  "16": "Calculate average photo count per job in a subquery.",
  "17": "Filter jobs by status and count per contractor.",
  "18": "Use ROW_NUMBER() OVER (PARTITION BY job_id ORDER BY upload_time).",
  "19": "Use ROW_NUMBER() over partition by contractor and order by start_date descending.",
  "20": "Use a window SUM() over partition by contractor_id and order by date.",
  "21": "In SQLite, implement a correlated subquery since RANGE frames on dates aren't supported.",
  "22": "Use LAG() to get previous upload_time and subtract dates.",
  "23": "Aggregate photos per contractor and apply RANK() function.",
  "24": "Use UPPER() function on name.",
  "25": "Use SUBSTR() or STRFTIME() to get year and month.",
  "26": "Left join jobs with contractors and filter for NULL contractor IDs.",
  "27": "Use JULIANDAY() difference and CASE expression.",
  "28": "Use TRIM() and concatenation.",
  "29": "Create an index on photos(job_id), run EXPLAIN QUERY PLAN, and compare the results.",
  "30": "Identify expensive joins and re-order them, or pre-aggregate with CTEs.",
  "31": "Use EXPLAIN QUERY PLAN to analyze query steps and find which table scans are expensive.",
  "32": "Calculate first photo upload per job and subtract start_date, then average across jobs.",
  "33": "Compare MAX(upload_time) per contractor to DATE('now','-30 day').",
  "34": "Aggregate per job to compute photo count, first upload, last upload, and difference in days between start and first upload.",
  "35": "Use STRFTIME() to get week numbers and join across weeks to see repeat uploads."
}